{"version":3,"sources":["../src/download.js"],"names":[],"mappings":"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","file":"download.js","sourcesContent":["import request from \"request\";\n\nexport default class Download {\n\n    _timeout = 60000;\n    _cache = false;\n    _delay = [ 2, 5 ]; // delay 2-5 sec (simulate a user)\n    _force = false;\n\n    constructor(options) {\n        if (options.timeout !== undefined) { this._timeout = options.timeout; }\n        if (options.delay !== undefined)   { this._delay = options.delay; }\n        if (options.cache !== undefined)   { this._cache = options.cache; }\n        if (options.force !== undefined)   { this._force = options.force; }\n    }\n\n    get(url, cookies) {\n        if (cookies) {\n            this._jar = request.jar()\n            for (let cookie of cookies) {\n                this._jar.setCookie(cookie, url);\n            }\n        }\n\n        // Get from cache or download it?\n        if (this._cache && !this._force && this._cache.has(url)) {\n            let res = {\n                content: this._cache.get(url),\n                cached: true\n            }\n            return Promise.resolve(res);\n        } else {\n            return (async () => {\n                let delay = 0;\n                if (this._useDelay) {\n                    delay = !Array.isArray(this._delay) ? this._delay : this._delay[0] + (this._delay[1] - this._delay[0]) * Math.random();\n                    await new Promise(resolve => setTimeout(resolve, delay * 1000));\n                } else {\n                    // Don't delay first download\n                    this._useDelay = true;\n                }\n\n                // Prepare options for request\n                let options = {\n                    url: url,\n                    headers: {\n                        'User-Agent': USER_AGENT\n                    },\n                    gzip: true,\n                    timeout: this._timeout\n                };\n                if (this._jar) {\n                    options.jar = this._jar;\n                }\n                let res = await this._download(options);\n                res.delay = delay;\n                return res;\n            })();\n        }\n    }\n\n    _download(options) {\n        return new Promise((resolve, reject) => {\n            const t0 = process.hrtime();\n            request(options, (error, response, content) => {\n                if (error !== null) {\n                    reject(error);\n                } else if (response.statusCode !== 200) {\n                    reject('Response code: ' + response.statusCode);\n                } else if (content) {\n                    // Use cache?\n                    if (this._cache) {\n                        this._cache.set(options.url, content);\n                    }\n\n                    // Debug info\n                    let diff = process.hrtime(t0);\n                    let time = diff[0] + diff[1] * 1e-9;\n                    resolve({ headers: response.headers, content, time });\n                } else {\n                    reject('This should not happen');\n                }\n            });\n        });\n\n    }\n}\n"]}