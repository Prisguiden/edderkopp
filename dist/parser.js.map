{"version":3,"sources":["../src/parser.js"],"names":[],"mappings":"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","file":"parser.js","sourcesContent":["import URI from 'urijs';\nimport cheerio from \"cheerio\";\nimport log from './log';\nimport * as tasks from './parser-tasks';\n\n// Parser\nexport default class {\n\n    constructor(html) {\n        this.$ = cheerio.load(html);\n    }\n\n    getData(rules) {\n        return this._recParse(rules);\n    }\n\n    getLinks(skipClasses) {\n        let $ = this.$;\n\n        let links = [];\n\n        // Build selector\n        let selector = 'a[rel!=nofollow]';\n        if (skipClasses) {\n            selector += ':not(' + skipClasses.join(',') + ')';\n        }\n\n        // Find and handle elements\n        $(selector).each((i, elem) => {\n            let url = $(elem).attr('href');\n            url = typeof url === 'string' ? url.trim() : false;\n            if (url) {\n                links.push(url);\n            }\n        });\n        return links;\n    }\n\n    // Recursively parse DOM\n    _recParse(rules, data, $container) {\n        let $ = this.$;\n        data = data || {};\n        for (let i = 0; i < rules.length; i++) {\n            const rule = rules[i];\n            if (rule.name) {\n                // const $elem = rule.elem ? $(rule.elem, $container) : $container;\n                let $elem, optional = false;\n                if (rule.elem) {\n                    if (Array.isArray(rule.elem)) {\n                        $elem = $(rule.elem[0], $container);\n                        optional = rule.elem[1] == 'optional';\n                    } else {\n                        $elem = $(rule.elem, $container);\n                    }\n                } else {\n                    $elem = $container;\n                }\n                if ($elem.length > 0) {\n                    if (rule.data == 'array') {\n                        data[rule.name] = data[rule.name] || [];\n                        $elem.each((i, e) => {\n                            let obj = {};\n                            data[rule.name].push(obj);\n                            this._recParse(rule.kids, obj, $(e));\n                        });\n                    } else if (rule.data == 'object') {\n                        data[rule.name] = {};\n                        this._recParse(rule.kids, data[rule.name], $elem);\n                    } else {\n                        const values = this._getContent($elem, rule);\n                        if (values !== null) {\n                            // Join values with same name\n                            data[rule.name] = data[rule.name] ? [].concat(data[rule.name], values) : values;\n                        }\n                    }\n                } else if (!optional){\n                    log.warn('[parser] Element not found: ' + rule.elem);\n                }\n            } else if (rule.elem) {\n                this._recParse(rule.kids, data, $(rule.elem, $container));\n            }\n        }\n        return data;\n    }\n\n    // Get values\n    _getContent($elem, rule) {\n        let $ = this.$;\n        let values = [];\n        const dataType = Array.isArray(rule.data) ? rule.data[0] : rule.data;\n        $elem.each(function() {\n            switch (dataType) {\n                case 'html':\n                    // Get all content including tags\n                    // Ex: <p>paragraph 1</p> <p>paragraph 2</p> <p>paragraph 3</p>\n                    values.push($(this).html().trim());\n                    break;\n                case 'text':\n                    // Get only text nodes\n                    // Ex: <span>skip this</span> get this <span>skip this</span>\n                    let nodes = [];\n                    $(this).contents().each((i, el) => {\n                        if (el.nodeType == 3) { // 3 = TEXT_NODE\n                            let value = el.data.trim();\n                            if (value) {\n                                nodes.push(el.data.trim());\n                            }\n                        }\n                    });\n                    const index = typeof rule.data !== 'string' ? rule.data[1] : false;\n                    if (index !== false) {\n                        values.push(nodes[index]);\n                    } else {\n                        values = [].concat(values, nodes);\n                    }\n                    break;\n                case 'attr':\n                    // Get content from attribute\n                    // Ex: <img src=\"value\">, <a href=\"value\">foo</a>\n                    for (let i = 1; i < rule.data.length; i++) {\n                        let attr = $(this).attr(rule.data[i]);\n                        if (attr) {\n                            values.push(attr);\n                        } else {\n                            log.warn('[parser] Attribute not found: ' + rule.data[i]);\n                        }\n                    }\n                    break;\n                case 'data':\n                    // Get content from data\n                    // Ex: <div data-img-a=\"value\" data-img-b=\"value\" data-img-c=\"value\">\n                    for (let i = 1; i < rule.data.length; i++) {\n                        let data = $(this).data(rule.data[i]);\n                        if (data) {\n                            values.push(data);\n                        } else {\n                            log.warn('[parser] Data attribute not found: ' + rule.data[i]);\n                        }\n                    }\n                    break;\n                default:\n                    // Get only text (strip away tags)\n                    values.push($(this).text().trim());\n            }\n        });\n\n        // Run tasks on values\n        if (rule.task) {\n            let task;\n            if (typeof rule.task == 'string') {\n                // \"task\": \"foobar\"\n                task = [ [ rule.task ] ];\n            } else if (!Array.isArray(rule.task[0])) {\n                // \"task\": [ \"foobar\", \"arg1\", \"arg2\" ]\n                task = [ rule.task ];\n            } else {\n                // \"task\": [\n                //     [ \"foobar1\", \"arg1\", \"arg2\" ],\n                //     [ \"foobar2\", \"arg1\", \"arg2\" ]\n                //  ]\n                task = rule.task;\n            }\n\n            for (let t of task) {\n                let name = t[0];\n                if (tasks[name]) {\n                    let args = t.slice(1);\n                    let tmp = [];\n                    for (let value of values) {\n                        let res = tasks[name](args, value);\n                        if (Array.isArray(res)) {\n                            tmp = tmp.concat(res);\n                        } else if (res) {\n                            tmp.push(res);\n                        }\n                    }\n                    values = tmp;\n                } else {\n                    log.warn('[parser] Task doesn\\'t exist: ' + name);\n                }\n            }\n        }\n\n        // No need to wrap single/empty values in an array\n        if (values.length <= 1) {\n            values = values.length == 1 ? values.pop() : null;\n        }\n\n        return values;\n    }\n\n    // Support custom tasks\n    static injectTasks(customTasks) {\n        for (var prop in customTasks) {\n            if (tasks[prop]) {\n                log.warn('[parser] Overriding task: ' + prop);\n            }\n            tasks[prop] = customTasks[prop];\n        }\n    }\n}\n"]}