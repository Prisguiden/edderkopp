{"version":3,"sources":["../src/log.js"],"names":[],"mappings":";;;;;;;;AAAA;;;;;;;;AAEA,kBAAQ,QAAR,GAAmB,IAAnB;;IAEM,G;AACF,mBAAc;AAAA;;AACV,aAAK,OAAL,GAAe,IAAI,kBAAQ,MAAZ,CAAmB;AAC9B,wBAAY,CACR,IAAI,kBAAQ,UAAR,CAAmB,OAAvB,CAA+B;AAC3B,uBAAO,MADoB;AAE3B,kCAAkB,KAFS;AAG3B,sBAAM,KAHqB;AAI3B,6BAAa,IAJc;AAK3B,0BAAU;AALiB,aAA/B,CADQ,CADkB;AAU9B,yBAAa;AAViB,SAAnB,CAAf;AAYA,aAAK,IAAL,GAAY,IAAI,kBAAQ,MAAZ,CAAmB;AAC3B,wBAAY,CACR,IAAI,kBAAQ,UAAR,CAAmB,IAAvB,CAA4B;AACxB,uBAAO,MADiB;AAExB,0BAAU,WAFc;AAGxB,+BAAe,IAHS;AAIxB,0BAAW,IAJa;AAKxB,kCAAkB,KALM;AAMxB,sBAAM,KANkB;AAOxB,yBAAS,OAPe,E;AAQxB,0BAAU;AARc,aAA5B,CADQ,CADe;AAa3B,yBAAa;AAbc,SAAnB,CAAZ;AAeA,aAAK,GAAL,GAAW,KAAK,OAAhB;AACH;;;;;;;8BA8BK,G,EAAK;AAAE,iBAAK,GAAL,CAAS,KAAT,CAAe,GAAf;AAAsB;;;8BAC7B,G,EAAK;AAAE,iBAAK,GAAL,CAAS,KAAT,CAAe,GAAf;AAAsB;;;gCAC3B,G,EAAK;AAAE,iBAAK,GAAL,CAAS,OAAT,CAAiB,GAAjB;AAAwB;;;6BAClC,G,EAAK;AAAE,iBAAK,GAAL,CAAS,IAAT,CAAc,GAAd;AAAqB;;;6BAC5B,G,EAAK;AAAE,iBAAK,GAAL,CAAS,IAAT,CAAc,GAAd;AAAqB;;;8BAC3B,G,EAAK;AAAE,iBAAK,GAAL,CAAS,KAAT,CAAe,GAAf;AAAsB;;;0BAjCxB,M,EAAQ;AACf,gBAAI,UAAU,SAAd,EAAyB;AACrB,qBAAK,GAAL,GAAW,KAAK,OAAhB;AACH,aAFD,MAEO,IAAI,UAAU,MAAd,EAAsB;AACzB,qBAAK,GAAL,GAAW,KAAK,IAAhB;AACH;AACJ;;;0BAEU,K,EAAO;AACd,iBAAK,OAAL,CAAa,UAAb,CAAwB,OAAxB,CAAgC,MAAhC,GAAyC,KAAzC;AACA,iBAAK,IAAL,CAAU,UAAV,CAAqB,IAArB,CAA0B,MAA1B,GAAmC,KAAnC;AACH;;;;;;;;;;;;;;0BAWS,K,EAAO;AACb,iBAAK,OAAL,CAAa,UAAb,CAAwB,OAAxB,CAAgC,KAAhC,GAAwC,KAAxC;AACA,iBAAK,IAAL,CAAU,UAAV,CAAqB,IAArB,CAA0B,KAA1B,GAAkC,KAAlC;AACH;;;;;;AAWL,IAAM,MAAM,IAAI,GAAJ,EAAZ;kBACe,G","file":"log.js","sourcesContent":["import winston from 'winston';\n\nwinston.emitErrs = true;\n\nclass Log {\n    constructor() {\n        this.console = new winston.Logger({\n            transports: [\n                new winston.transports.Console({\n                    level: 'info',\n                    handleExceptions: false,\n                    json: false,\n                    prettyPrint: true,\n                    colorize: true\n                })\n            ],\n            exitOnError: false\n        });\n        this.file = new winston.Logger({\n            transports: [\n                new winston.transports.File({\n                    level: 'info',\n                    filename: 'error.log',\n                    zippedArchive: true,\n                    tailable : true,\n                    handleExceptions: false,\n                    json: false,\n                    maxsize: 5242880, // 5MB\n                    maxFiles: 5\n                })\n            ],\n            exitOnError: false\n        });\n        this.log = this.console;\n    }\n\n    set target(target) {\n        if (target == 'console') {\n            this.log = this.console;\n        } else if (target == 'file') {\n            this.log = this.file;\n        }\n    }\n\n    set silent(value) {\n        this.console.transports.console.silent = value;\n        this.file.transports.file.silent = value;\n    }\n\n    /**\n     * Config levels:\n     *   silly: 0,\n     *   debug: 1,\n     *   verbose: 2,\n     *   info: 3,\n     *   warn: 4,\n     *   error: 5\n     */\n    set level(level) {\n        this.console.transports.console.level = level;\n        this.file.transports.file.level = level;\n    }\n\n    // Mapping methods to winston\n    silly(msg) { this.log.silly(msg); }\n    debug(msg) { this.log.debug(msg); }\n    verbose(msg) { this.log.verbose(msg); }\n    info(msg) { this.log.info(msg); }\n    warn(msg) { this.log.warn(msg); }\n    error(msg) { this.log.error(msg); }\n}\n\nconst log = new Log();\nexport default log;\n"]}