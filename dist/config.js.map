{"version":3,"sources":["../src/config.js"],"names":[],"mappings":"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","file":"config.js","sourcesContent":["import fs from 'fs';\nimport u from 'url';\n\nclass Config {\n\n    _cache = {};\n\n    constructor() {\n        this._dir = process.env.NODE_CONFIG_DIR || process.cwd() + '/config';\n    }\n\n    // Set config dir\n    set dir(dir) {\n        this._dir = dir;\n    }\n\n    // Get config\n    get(arg) {\n        if (!this._cache[arg]) {\n            if (Number.isInteger(arg)) { // support id in filename (ex: configfile-<id>.js)\n                this._cache[arg] = this._getById(arg);\n            } else if (arg.indexOf('http') !== -1) { // support url (will look for the url property in all config files)\n                this._cache[arg] = this._getByUrl(arg);\n            } else if (arg.indexOf('/') !== -1) { // support full path of file (ex: /home/user/config.js)\n                this._cache[arg] = this._parse(arg);\n            } else { // support recursive search for config file in dir. return first found (ex: configfile.js)\n                this._cache[arg] = this._getByFile(arg);\n            }\n        }\n        return this._cache[arg];\n    }\n\n    // Get config by id. Match id with all files found in _getFiles\n    _getById(id) {\n        this._init();\n        for (let file of this._files) {\n            let match = file.match(/-(\\d+)\\./);\n            if (match && match[1] == id) {\n                return this._parse(file);\n            }\n        }\n        return false;\n    }\n\n    // Get config by filename. Match file with all files found in _getFiles\n    _getByFile(file) {\n        this._init();\n        for (let f of this._files) {\n            if (f.indexOf(file) > -1) {\n                return this._parse(f);\n            }\n        }\n        return false;\n    }\n\n    // Get config by url. Open all files found in _getFiles and look at the url property\n    _getByUrl(url) {\n        this._init();\n        let hostname = u.parse(url).hostname;\n        for (let file of this._files) {\n            let config = this._parse(file);\n            if (config && config.url && hostname == u.parse(config.url).hostname) {\n                return config;\n            }\n        }\n        return false;\n    }\n\n    // Get filenames\n    _init() {\n        if (!this._files) {\n            this._files = this._getFiles(this._dir);\n        }\n    }\n\n    // Open and parse file\n    _parse(file) {\n        var match = file.match(/.*\\.([^.]*)$/);\n        if (match[1] == 'json') {\n            return JSON.parse(fs.readFileSync(file).toString());\n        } else if (match[1] == 'js') {\n            return require(file);\n        } else {\n            return false;\n        }\n    }\n\n\n    // Recursivly find all filenames\n    _getFiles(dir) {\n        let files = [];\n        for (let file of fs.readdirSync(dir)) {\n            if (fs.statSync(dir + '/' + file).isDirectory()) {\n                files = files.concat(this._getFiles(dir + '/' + file));\n            } else {\n                files.push(dir + '/' + file);\n            }\n        };\n        return files;\n    }\n}\n\nconst config = new Config();\nexport default config;\n"]}