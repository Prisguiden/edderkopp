{"version":3,"sources":["../src/tasks.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;IAAM,K;;;;;;;+BAEK,K,EAAO;AACV,iBAAK,IAAI,IAAT,IAAiB,KAAjB,EAAwB;AACpB,oBAAI,KAAK,IAAL,CAAJ,EAAgB;AACZ,wBAAI,IAAJ,CAAS,+BAA+B,IAAxC;AACH;AACD,qBAAK,IAAL,IAAa,MAAM,IAAN,CAAb;AACH;AACJ;;AAED;;;;2BACG,I,EAAM,K,EAAO;AACZ,mBAAO,KAAK,KAAL,CAAP;AACH;;AAED;;;;6BACK,I,EAAM,K,EAAO;AACd,mBAAO,KAAK,KAAL,CAAW,KAAX,CAAP;AACH;;AAED;AACA;;;;8BACM,I,EAAM,K,EAAO;AACf,gBAAI,UAAU,MAAM,KAAN,CAAY,IAAI,MAAJ,CAAW,KAAK,CAAL,CAAX,CAAZ,CAAd;AACA,gBAAI,OAAJ,EAAa;AACT,uBAAO,KAAK,CAAL,MAAY,SAAZ,GAAwB,KAAxB,GAAgC,QAAQ,KAAK,CAAL,CAAR,CAAvC;AACH,aAFD,MAEO;AACH,uBAAO,IAAP;AACH;AACJ;;AAED;;;;gCACQ,I,EAAM,K,EAAO;AACjB,mBAAO,KAAK,CAAL,IAAU,KAAjB;AACH;;AAED;;;;+BACO,I,EAAM,K,EAAO;AAChB,mBAAO,QAAQ,KAAK,CAAL,CAAf;AACH;;AAED;;;;8BACM,I,EAAM,K,EAAO;AACf,mBAAO,MAAM,KAAN,CAAY,KAAK,CAAL,CAAZ,CAAP;AACH;;AAED;AACA;AACA;AACA;;;;gCACQ,I,EAAM,K,EAAO;AACjB,gBAAI,IAAI,KAAK,CAAL,CAAR,CADiB,CACA;AACjB,gBAAI,IAAI,KAAK,CAAL,CAAR,CAFiB,CAEA;AACjB,gBAAI,KAAK,KAAK,CAAL,CAAT,CAHiB,CAGC;AAClB,gBAAI,OAAO,CAAP,IAAY,QAAZ,IAAwB,OAAO,CAAP,IAAY,QAAxC,EAAkD;AAC9C,oBAAI,CAAE,CAAF,CAAJ;AACA,oBAAI,CAAE,CAAF,CAAJ;AACH;AACD,gBAAI,OAAJ;AACA,iBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,EAAE,MAAtB,EAA8B,GAA9B,EAAmC;AAC/B,0BAAU,MAAM,QAAN,GAAiB,IAAI,MAAJ,CAAW,EAAE,CAAF,CAAX,EAAiB,GAAjB,CAAjB,GAAyC,EAAE,CAAF,CAAnD;AACA,wBAAQ,MAAM,OAAN,CAAc,OAAd,EAAuB,EAAE,CAAF,CAAvB,CAAR;AACH;AACD,mBAAO,KAAP;AACH;;AAED;;;;;;;;;;;;;;oBACS,I,EAAM,K,EAAO;AAClB,gBAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAC3B,uBAAO,KAAP;AACH;AACD,oBAAQ,QAAQ,MAAM,OAAN,CAAc,QAAd,EAAwB,EAAxB,CAAR,GAAsC,IAA9C;AACA,mBAAO,QAAQ,SAAS,KAAT,EAAgB,EAAhB,CAAR,GAA8B,IAArC;AACH,S;;;;;AAGL,IAAM,QAAQ,IAAI,KAAJ,EAAd;kBACe,K","file":"tasks.js","sourcesContent":["class Tasks {\n\n    inject(tasks) {\n        for (var prop in tasks) {\n            if (this[prop]) {\n                log.warn('[parser] Overriding task: ' + prop);\n            }\n            this[prop] = tasks[prop];\n        }\n    }\n\n    // task: 'js'\n    js(args, value) {\n        return eval(value);\n    }\n\n    // task: 'json'\n    json(args, value) {\n        return JSON.parse(value);\n    }\n\n    // task: [ 'match', '\\\\/(\\\\w+)-(\\\\d+)' ] => returns value or null\n    // task: [ 'match', '\\\\/(\\\\w+)-(\\\\d+)', 2 ] => returns matches[2] or null\n    match(args, value) {\n        let matches = value.match(new RegExp(args[0]));\n        if (matches) {\n            return args[1] === undefined ? value : matches[args[1]];\n        } else {\n            return null;\n        }\n    }\n\n    // task: [ 'prepend',  'http://foo.bar/' ]\n    prepend(args, value) {\n        return args[0] + value;\n    }\n\n    // task: [ 'append',  '&foo=bar' ]\n    append(args, value) {\n        return value + args[0];\n    }\n\n    // task: [ 'split',  '&foo=bar' ]\n    split(args, value) {\n        return value.split(args[0]);\n    }\n\n    // Replace a with b in c supporting arrays\n    // task: [ 'replace',  'foo', 'bar' ]\n    // task: [ 'replace',  [ 'a', 'b' ],  [ 'c', 'e' ] ]\n    // task: [ 'replace',  '[\\\\r\\\\n\\\\t\\\\s]+', '', 'regexp' ]\n    replace(args, value) {\n        let s = args[0]; // search for\n        let r = args[1]; // replace with\n        let re = args[2]; // optional regexp\n        if (typeof s == 'string' && typeof r == 'string') {\n            s = [ s ];\n            r = [ r ];\n        }\n        var pattern;\n        for (let i = 0; i < s.length; i++) {\n            pattern = re == 'regexp' ? new RegExp(s[i], 'g') : s[i];\n            value = value.replace(pattern, r[i]);\n        }\n        return value;\n    }\n\n    // task: 'parseInt'\n    parseInt(args, value) {\n        if (typeof value === 'number') {\n            return value;\n        }\n        value = value ? value.replace(/[^\\d]/g, '') : null;\n        return value ? parseInt(value, 10) : null;\n    }\n}\n\nconst tasks = new Tasks();\nexport default tasks;\n"]}