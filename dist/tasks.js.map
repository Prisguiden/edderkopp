{"version":3,"sources":["../src/tasks.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;IAAqB,K;;;;;;;+BAEH,K,EAAO;AACjB,iBAAK,IAAI,IAAT,IAAiB,KAAjB,EAAwB;AACpB,oBAAI,KAAK,MAAL,CAAY,IAAZ,CAAJ,EAAuB;AACnB,wBAAI,IAAJ,CAAS,+BAA+B,IAAxC;AACH;AACD,qBAAK,MAAL,CAAY,IAAZ,IAAoB,MAAM,IAAN,CAApB;AACH;AACJ;;;4BAEU,I,EAAM,K,EAAO,I,EAAM;AAC1B,mBAAO,KAAK,MAAL,CAAY,IAAZ,EAAkB,KAAlB,EAAyB,IAAzB,CAAP;AACH;;;4BAEU,I,EAAM;AACb,mBAAO,CAAC,CAAC,KAAK,MAAL,CAAY,IAAZ,CAAT;AACH;;AAED;;;;;;AAnBiB,K,CAoBV,M,GAAS;AACZ;AACA,QAAI,YAAS,KAAT,EAAgB,IAAhB,EAAsB;AACtB,eAAO,KAAK,KAAK,CAAL,CAAL,CAAP;AACH,KAJW;;AAMZ;AACA,UAAM,cAAS,KAAT,EAAgB;AAClB,eAAO,KAAK,KAAL,CAAW,KAAX,CAAP;AACH,KATW;;AAWZ;AACA;AACA,WAAO,eAAS,KAAT,EAAgB,IAAhB,EAAsB;AACzB,YAAI,UAAU,MAAM,KAAN,CAAY,IAAI,MAAJ,CAAW,KAAK,CAAL,CAAX,CAAZ,CAAd;AACA,YAAI,OAAJ,EAAa;AACT,mBAAO,KAAK,CAAL,MAAY,SAAZ,GAAwB,KAAxB,GAAgC,QAAQ,KAAK,CAAL,CAAR,CAAvC;AACH,SAFD,MAEO;AACH,mBAAO,IAAP;AACH;AACJ,KApBW;;AAsBZ;AACA,aAAS,iBAAS,KAAT,EAAgB,IAAhB,EAAsB;AAC3B,eAAO,KAAK,CAAL,IAAU,KAAjB;AACH,KAzBW;;AA2BZ;AACA,YAAQ,gBAAS,KAAT,EAAgB,IAAhB,EAAsB;AAC1B,eAAO,QAAQ,KAAK,CAAL,CAAf;AACH,KA9BW;;AAgCZ;AACA,WAAO,eAAS,KAAT,EAAgB,IAAhB,EAAsB;AACzB,eAAO,MAAM,KAAN,CAAY,KAAK,CAAL,CAAZ,CAAP;AACH,KAnCW;;AAqCZ;AACA;AACA;AACA;AACA,aAAS,iBAAS,KAAT,EAAgB,IAAhB,EAAsB;AAC3B,YAAI,IAAI,KAAK,CAAL,CAAR,CAD2B,CACV;AACjB,YAAI,IAAI,KAAK,CAAL,CAAR,CAF2B,CAEV;AACjB,YAAI,KAAK,KAAK,CAAL,CAAT,CAH2B,CAGT;AAClB,YAAI,OAAO,CAAP,IAAY,QAAZ,IAAwB,OAAO,CAAP,IAAY,QAAxC,EAAkD;AAC9C,gBAAI,CAAE,CAAF,CAAJ;AACA,gBAAI,CAAE,CAAF,CAAJ;AACH;AACD,YAAI,OAAJ;AACA,aAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,EAAE,MAAtB,EAA8B,GAA9B,EAAmC;AAC/B,sBAAU,MAAM,QAAN,GAAiB,IAAI,MAAJ,CAAW,EAAE,CAAF,CAAX,EAAiB,GAAjB,CAAjB,GAAyC,EAAE,CAAF,CAAnD;AACA,oBAAQ,MAAM,OAAN,CAAc,OAAd,EAAuB,EAAE,CAAF,CAAvB,CAAR;AACH;AACD,eAAO,KAAP;AACH,KAvDW;;AAyDZ;AACA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,MAAU,UAAS,KAAT,EAAgB;AACtB,YAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAC3B,mBAAO,KAAP;AACH;AACD,gBAAQ,QAAQ,MAAM,OAAN,CAAc,QAAd,EAAwB,EAAxB,CAAR,GAAsC,IAA9C;AACA,eAAO,QAAQ,SAAS,KAAT,EAAgB,EAAhB,CAAR,GAA8B,IAArC;AACH,KAND;;AA1DY,C;kBApBC,K","file":"tasks.js","sourcesContent":["export default class Tasks {\n\n    static inject(tasks) {\n        for (var prop in tasks) {\n            if (this._tasks[prop]) {\n                log.warn('[parser] Overriding task: ' + prop);\n            }\n            this._tasks[prop] = tasks[prop];\n        }\n    }\n\n    static run(task, value, args) {\n        return this._tasks[task](value, args);\n    }\n\n    static has(task) {\n        return !!this._tasks[task];\n    }\n\n    // Default tasks\n    static _tasks = {\n        // task: [ 'js', '((v)=>{ return \"custom\"+v;})(value)' ]\n        js: function(value, args) {\n            return eval(args[0]);\n        },\n\n        // task: 'json'\n        json: function(value) {\n            return JSON.parse(value);\n        },\n\n        // task: [ 'match', '\\\\/(\\\\w+)-(\\\\d+)' ] => returns value or null\n        // task: [ 'match', '\\\\/(\\\\w+)-(\\\\d+)', 2 ] => returns matches[2] or null\n        match: function(value, args) {\n            let matches = value.match(new RegExp(args[0]));\n            if (matches) {\n                return args[1] === undefined ? value : matches[args[1]];\n            } else {\n                return null;\n            }\n        },\n\n        // task: [ 'prepend',  'http://foo.bar/' ]\n        prepend: function(value, args) {\n            return args[0] + value;\n        },\n\n        // task: [ 'append',  '&foo=bar' ]\n        append: function(value, args) {\n            return value + args[0];\n        },\n\n        // task: [ 'split',  '&foo=bar' ]\n        split: function(value, args) {\n            return value.split(args[0]);\n        },\n\n        // Replace a with b in c supporting arrays\n        // task: [ 'replace',  'foo', 'bar' ]\n        // task: [ 'replace',  [ 'a', 'b' ],  [ 'c', 'e' ] ]\n        // task: [ 'replace',  '[\\\\r\\\\n\\\\t\\\\s]+', '', 'regexp' ]\n        replace: function(value, args) {\n            let s = args[0]; // search for\n            let r = args[1]; // replace with\n            let re = args[2]; // optional regexp\n            if (typeof s == 'string' && typeof r == 'string') {\n                s = [ s ];\n                r = [ r ];\n            }\n            var pattern;\n            for (let i = 0; i < s.length; i++) {\n                pattern = re == 'regexp' ? new RegExp(s[i], 'g') : s[i];\n                value = value.replace(pattern, r[i]);\n            }\n            return value;\n        },\n\n        // task: 'parseInt'\n        parseInt: function(value) {\n            if (typeof value === 'number') {\n                return value;\n            }\n            value = value ? value.replace(/[^\\d]/g, '') : null;\n            return value ? parseInt(value, 10) : null;\n        }\n\n    }\n\n}\n"]}