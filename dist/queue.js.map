{"version":3,"sources":["../src/queue.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;AACA;;AAGI,sBAA0B;AAAA,YAAd,OAAc,yDAAJ,EAAI;AAAA;;AACtB,aAAK,QAAL,GAAgB,QAAQ,QAAR,KAAqB,SAArB,GAAiC,QAAQ,QAAzC,GAAoD,OAAO,SAA3E;AACA,aAAK,QAAL,GAAgB,QAAQ,QAAR,KAAqB,SAArB,GAAiC,QAAQ,QAAzC,GAAoD,OAAO,SAA3E;AACA,aAAK,IAAL;AACH;;;;+BAEM;AACH,iBAAK,MAAL,GAAc,EAAE,KAAK,EAAP,EAAW,KAAK,EAAhB,EAAd;AACA,iBAAK,MAAL,GAAc,CAAd;AACA,iBAAK,MAAL,GAAc,CAAd;AACH;;;4BAUG,K,EAAO;AACP,gBAAI,CAAC,MAAM,OAAN,CAAc,KAAd,CAAL,EAA2B;AACvB,wBAAQ,CAAE,KAAF,CAAR;AACH;AACD,iBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,MAAM,MAA1B,EAAkC,GAAlC,EAAuC;AACnC,oBAAI,KAAK,MAAL,GAAc,KAAK,QAAvB,EAAiC;AAC7B,yBAAK,MAAL,CAAY,GAAZ,CAAgB,IAAhB,CAAqB,MAAM,CAAN,CAArB;AACA,yBAAK,MAAL;AACH,iBAHD,MAGO;AACH;AACA;AACH;AACJ;AACJ;;;8BAEK;AACF,gBAAI,KAAK,MAAL,CAAY,GAAZ,CAAgB,MAApB,EAA4B;AACxB,uBAAO,KAAK,MAAL,CAAY,GAAZ,CAAgB,GAAhB,EAAP;AACH,aAFD,MAEO;AACH,oBAAI,KAAK,MAAL,CAAY,GAAZ,CAAgB,MAApB,EAA4B;AACxB,wBAAI,KAAK,MAAL,GAAc,KAAK,QAAvB,EAAiC;AAC7B,6BAAK,MAAL,CAAY,GAAZ,GAAkB,KAAK,MAAL,CAAY,GAA9B;AACA,6BAAK,MAAL,CAAY,GAAZ,GAAkB,EAAlB;AACA,6BAAK,MAAL;AACA,+BAAO,KAAK,MAAL,CAAY,GAAZ,CAAgB,GAAhB,EAAP;AACH,qBALD,MAKO;AACH;AACA;AACA,+BAAO,KAAP;AACH;AACJ,iBAXD,MAWO;AACH;AACA;AACA,2BAAO,KAAP;AACH;AACJ;AACJ;;;4BA5CW;AACR,mBAAO,KAAK,MAAL,CAAY,GAAZ,CAAgB,MAAhB,IAA0B,CAA1B,IAA+B,KAAK,MAAL,CAAY,GAAZ,CAAgB,MAAhB,IAA0B,CAAhE;AACH;;;4BAEW;AACR,mBAAO,KAAK,MAAZ;AACH","file":"queue.js","sourcesContent":["\n// Queue\nexport default class {\n\n    constructor(options = {}) {\n        this.maxItems = options.maxItems !== undefined ? options.maxItems : Number.MAX_VALUE;\n        this.maxDepth = options.maxDepth !== undefined ? options.maxDepth : Number.MAX_VALUE;\n        this.init();\n    }\n\n    init() {\n        this._stack = { add: [], get: [] };\n        this._depth = 0;\n        this._items = 0;\n    }\n\n    get empty() {\n        return this._stack.add.length == 0 && this._stack.get.length == 0;\n    }\n\n    get depth() {\n        return this._depth;\n    }\n\n    add(items) {\n        if (!Array.isArray(items)) {\n            items = [ items ];\n        }\n        for (let i = 0; i < items.length; i++) {\n            if (this._items < this.maxItems) {\n                this._stack.add.push(items[i]);\n                this._items++\n            } else {\n                // Reached max items, don't add more\n                break;\n            }\n        };\n    }\n\n    get() {\n        if (this._stack.get.length) {\n            return this._stack.get.pop();\n        } else {\n            if (this._stack.add.length) {\n                if (this._depth < this.maxDepth) {\n                    this._stack.get = this._stack.add;\n                    this._stack.add = [];\n                    this._depth++;\n                    return this._stack.get.pop();\n                } else {\n                    // Reached max depth\n                    // console.log('Max depth!');\n                    return false;\n                }\n            } else {\n                // Out of items\n                // console.log('Out of items!');\n                return false;\n            }\n        }\n    }\n}\n"]}