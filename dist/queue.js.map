{"version":3,"sources":["../src/queue.js"],"names":[],"mappings":";;;;;;;;;;;;;AAaI,oBAAY,QAAZ,EAAsB,QAAtB,EAAgC;AAAA;;AAAA,aAThC,KASgC,GATxB;AACJ,iBAAK,EADD;AAEJ,iBAAK;AAFD,SASwB;AAAA,aALhC,QAKgC,GALrB,OAAO,SAKc;AAAA,aAJhC,QAIgC,GAJrB,OAAO,SAIc;AAAA,aAHhC,KAGgC,GAHxB,CAGwB;AAAA,aAFhC,KAEgC,GAFxB,CAEwB;;AAC5B,YAAI,QAAJ,EAAc;AAAE,iBAAK,QAAL,GAAgB,QAAhB;AAA2B;AAC3C,YAAI,QAAJ,EAAc;AAAE,iBAAK,QAAL,GAAgB,QAAhB;AAA2B;AAC9C;;;;kCAES;AACN,mBAAO,KAAK,KAAL,CAAW,GAAX,CAAe,MAAf,IAAyB,CAAzB,IAA8B,KAAK,KAAL,CAAW,GAAX,CAAe,MAAf,IAAyB,CAA9D;AACH;;;4BAEG,K,EAAO;AACP,gBAAI,CAAC,MAAM,OAAN,CAAc,KAAd,CAAL,EAA2B;AACvB,wBAAQ,CAAE,KAAF,CAAR;AACH;AACD,iBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,MAAM,MAA1B,EAAkC,GAAlC,EAAuC;AACnC,oBAAI,KAAK,KAAL,GAAa,KAAK,QAAtB,EAAgC;AAC5B,yBAAK,KAAL,CAAW,GAAX,CAAe,IAAf,CAAoB,MAAM,CAAN,CAApB;AACA,yBAAK,KAAL;AACH,iBAHD,MAGO;;AAEH;AACH;AACJ;AACJ;;;8BAEK;AACF,gBAAI,KAAK,KAAL,CAAW,GAAX,CAAe,MAAnB,EAA2B;AACvB,uBAAO,KAAK,KAAL,CAAW,GAAX,CAAe,GAAf,EAAP;AACH,aAFD,MAEO;AACH,oBAAI,KAAK,KAAL,CAAW,GAAX,CAAe,MAAnB,EAA2B;AACvB,wBAAI,KAAK,KAAL,GAAa,KAAK,QAAtB,EAAgC;AAC5B,6BAAK,KAAL,CAAW,GAAX,GAAiB,KAAK,KAAL,CAAW,GAA5B;AACA,6BAAK,KAAL,CAAW,GAAX,GAAiB,EAAjB;AACA,6BAAK,KAAL;AACA,+BAAO,KAAK,KAAL,CAAW,GAAX,CAAe,GAAf,EAAP;AACH,qBALD,MAKO;;;AAGH,+BAAO,KAAP;AACH;AACJ,iBAXD,MAWO;;;AAGH,2BAAO,KAAP;AACH;AACJ;AACJ","file":"queue.js","sourcesContent":["\n// Queue\nexport default class {\n\n    stack = {\n        add: [],\n        get: []\n    }\n    maxItems = Number.MAX_VALUE;\n    maxDepth = Number.MAX_VALUE;\n    depth = 0;\n    items = 0;\n\n    constructor(maxItems, maxDepth) {\n        if (maxItems) { this.maxItems = maxItems; }\n        if (maxDepth) { this.maxDepth = maxDepth; }\n    }\n\n    isEmpty() {\n        return this.stack.add.length == 0 && this.stack.get.length == 0;\n    }\n\n    add(items) {\n        if (!Array.isArray(items)) {\n            items = [ items ];\n        }\n        for (let i = 0; i < items.length; i++) {\n            if (this.items < this.maxItems) {\n                this.stack.add.push(items[i]);\n                this.items++\n            } else {\n                // Reached max items, don't add more\n                break;\n            }\n        };\n    }\n\n    get() {\n        if (this.stack.get.length) {\n            return this.stack.get.pop();\n        } else {\n            if (this.stack.add.length) {\n                if (this.depth < this.maxDepth) {\n                    this.stack.get = this.stack.add;\n                    this.stack.add = [];\n                    this.depth++;\n                    return this.stack.get.pop();\n                } else {\n                    // Reached max depth\n                    // console.log('Max depth!');\n                    return false;\n                }\n            } else {\n                // Out of items\n                // console.log('Out of items!');\n                return false;\n            }\n        }\n    }\n}\n"]}